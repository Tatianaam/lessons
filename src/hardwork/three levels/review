Думаем на уровне дизайна.

Попробовала именно рабочий код писать в стиле TDD. Действительно приходится постоянно возвращаться и чинить предыдущие тесты,
т.к. приходится добавлять mocks для repositories & mappers. А писать тесты на изолированные куски тяжело, особенно
с некоторыми странностями groovy и того как он позволяет проверять вызывались мокнутые методы или нет.
Потом, при тестировании валидации значений полей, обычно писалась пара параметризованных тестов, где стразу тестировалось
куча разных вариантов параметров (обычно отдельно те, которые бы прошли и те которые нет). C TDD по сути так тоже можно сделать,
но так тяжелее или если сразу написать такой тест, то потом нудно писать и больший кусок кода и ощущение как будто это уже и не TDD,
а кучу похожих тестов писать становится лень  .  Также код, который писался, по логике похож на что то написанное ранее,
только другие обЪекты/таблицы, и ощущение, что в голове уже есть примерный порядок того, что и как нужно написать и создается ощущение,
что пишу то, что уже знаю как писать, но подстраиваясь под TDD. Наверное, конкретно этот тикет портит чистоту эксперимента 

После изучения материалов больше думаешь о том, поменяется ли что то, если реализация какого-то метода изменится,
и насколько легко будет изменить. Хочется точнее, по смыслу именовать константы, использующиеся в логике.

Примеры  с работы предоставить не могу, мейлы на внешние адреса (вне списка исключений) отправлять нельзя,
доступ на гит хаб только чтения, придумывать более извращенные способы обхода «безопасности» не очень хочется.

Для большей практики более чистого tdd решила написать маленькую програмку, которая немного помогает разобрать бардак.

Есть папка с документами, все либо word, либо pdf, названы по адресам домов (типа 123 Main, 654 South),
у некоторых вначале слова Lease Agreement, а в конце даты (года типа 20-22б 2023-2024), какие-то версии еще со словом signed.
Файлов куча, все свалены в одно место, было бы удобнее искать старые лизы, если бы все было по папкам с адресами.
Вот это я и решила сделать. Голая джава без сторонних библиотек, маленькая програмка, запускается просто с командной строки.

https://github.com/Tatianaam/FileSorter/blob/master/src/main/java/sorter/Sorter.java

С второй попытки лучше получалось писать тесты, которые потом не надо чинить. Старалась точнее давать названия методам.
Писать отдельные маленькие методы, которые легко отдельно тестировать, а потом собрать из них последовательность действий.
В какой то момент подумалось о том, что код начинает следовать тестам.
В тестах написание предусловий помогало четче думать о требованиях.
Когда точно знаю, что какие-то данные точно никогда не попадут на вход, то не пишу лишние проверки/обработки.


